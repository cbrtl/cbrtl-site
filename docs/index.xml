<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>cbrtl</title><link>https://cbrtl.github.io/</link><description>Recent content on cbrtl</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 25 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cbrtl.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello world!</title><link>https://cbrtl.github.io/posts/what-and-why/</link><pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate><guid>https://cbrtl.github.io/posts/what-and-why/</guid><description>cbrtl - now live</description><content:encoded><![CDATA[<h1 id="what-is-cbrtl">What is cbrtl?</h1>
<p><strong>cbrtl</strong> is an attempt at creating a tight knit group of programmers to showcase and collaborate
on fun projects.</p>
<h2 id="what-do-we-do-here">What do we do here?</h2>
<ul>
<li><strong>Create</strong> fun projects. Either in groups or in isolation.</li>
<li>Organize community and online <strong>showcases</strong> for group and individual projects.</li>
<li><strong>Contribute</strong> to Open Source projects both in cbrtl and in other communities.</li>
<li>Conduct <strong>code reviews</strong> and <strong>JAM</strong>s.</li>
<li>Share <strong>resources</strong> to learn.</li>
<li>Create and maintain <strong>dev-journals and blogs</strong>.</li>
</ul>
<h2 id="what-is-the-end-goal">What is the end goal?</h2>
<p>Merely to promote Open Source culture and proper software development</p>
<h2 id="how-far-down-the-road-are-we">How far down the road are we?</h2>
<p>Not that far, the egg has just been laid.
As of the time of writing this post, we have just started out.
For the effort to work out, we welcome interested folks over :)</p>
<h2 id="what-can-i-do">What can I do?</h2>
<p>Just what you&rsquo;ve been doing so far, but with more people!</p>
<p>If you have any interesting projects that you have already been working on, let us know and we&rsquo;ll put them on the cbrtl page for more people to see. Note that there is some criteria that projects must qualify, some of these are intentionally vague. But as long as you&rsquo;re doing more than following a course or tutorial, it&rsquo;s likely to be accepted :)</p>
<h1 id="volunteering-to-cbrtl">Volunteering to cbrtl</h1>
<p>We are looking for volunteers for some roles.
Note however, that there is no strict mandate for responsibilities.
As long as you&rsquo;re capable of adding <em>something</em> of value, no matter how small, shoot us a message!
We&rsquo;re looking for some help with:</p>
<ul>
<li>
<p><strong>Code reviewers</strong>: If you have experience contributing to FOSS or writing code for user/developer
facing products, perhaps you can volunteer and help us out here :)</p>
</li>
<li>
<p><strong>Editors</strong>: We plan on writing frequent blog posts.
But both the technical content and the english material can use a second pair of eyes to help catch mistakes or inconsistent writing.
If you have done some technical writing before, you can volunteer for reviewing the content in blog posts!</p>
</li>
<li>
<p><strong>Technical Writers</strong>: If you have experience writing code but are usually on a tight schedule, you
may be able to join us and share your knowledge. We want to mandate a high quality in our posts, so any
tutorial/how-to guide that has been done a million times before is generally discouraged. We want
to avoid redundant topics like &ldquo;How to build a todo app with React&rdquo; and promote posts and dev-logs /
journals that are fun to read and explore.</p>
</li>
<li>
<p><strong>Frontend devs</strong>: Currently, the cbrtl website is bland and not-so-catchy.
While minimalism is the core idea, we can definitely use some front-end developers to help keep the UI fresh, responsive and modern.</p>
</li>
<li>
<p><strong>Moderators</strong>: To help keep the community together on discord and github.</p>
</li>
</ul>
<p><strong>NOTE</strong> We do not expect any amount of time commitment from volunteers, as long as you can make small
contributions, we appreciate it.
Volunteering is not druge work, and active frequent contributions are appreciated, but not required.</p>
<h1 id="the-kind-of-software-we-want-to-write">The kind of software we want to write</h1>
<p>We firmly believe in re-inventing the wheel.
Writing software close to the metal helps us closely understand the behind-the-scenes of software that most take for granted.
While any creative project is welcome, here are some ideas that adhere to the spirit:</p>
<ul>
<li>Compilers</li>
<li>Virtual Machines and Interpreters</li>
<li>Game Engines</li>
<li>Operating Systems</li>
<li>Search Engines</li>
<li>Database engines</li>
<li>Voxel renderers</li>
<li>TCP/IP stack</li>
<li>VCS</li>
<li>Web servers</li>
<li>Web browsers</li>
<li>Text editors</li>
<li>Anything else that is NOT a react todo app, or a vue planner app, or a terminal tic-tac-toe game.</li>
</ul>
<p>All of these are but regular software that we tend to take for granted, that can be (and have been) written from scratch.
We encourage all kinds of creative projects no matter how basic.
But you can expect the above group projects to come to life as the community grows.</p>
<h2 id="showcasing-your-project">Showcasing your project</h2>
<p>If you want to showcase your project on our github org, then reach out to us on discord or the mailing list.</p>
]]></content:encoded></item><item><title>Conway's Game of Life</title><link>https://cbrtl.github.io/posts/game-of-life/</link><pubDate>Thu, 21 Nov 2024 00:00:00 +0000</pubDate><guid>https://cbrtl.github.io/posts/game-of-life/</guid><description>Understanding computational models and implementing Conway&amp;#39;s Game of Life using simple rules that mimic real-life population dynamics.</description><content:encoded><![CDATA[

<script type="module" src="/js/game-of-life/main.js"></script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css">
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js"
  onload="renderMathInElement(document.body, {
    delimiters: [
      {left: '$$', right: '$$', display: true},
      {left: '$', right: '$', display: false}
    ]
  });">
</script>

<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

<h1 id="abstract-machines-and-the-computational-universe">Abstract machines and the computational universe</h1>
<p>Automata theory is a branch of theoretical computer science that deals with abstract machines and the computational problems that can be solved using these machines. Automata are mathematical models of a machine that can perform certain computations. Essentialy, these are <strong>fundamental units of computation</strong> that can process input and produce output based on a set of rules. They are used to model and analyze computational systems, study the limits of computation, and explore the properties of formal languages(sets of strings of symbols that can be recognized by automata).</p>
<p>For example, this automaton can be thought of as a machine that processes input strings of 0s and 1s and produces an output based on a set of rules, such as:</p>
<p>$f: {0, 1}^* \rightarrow {0, 1}^*$</p>
<p>where $f$ is a function that takes an input string of $0$s and $1$s and produces an output string of $0$s and $1$s, based on the following rules:</p>
<ul>
<li>If the input string contains an odd number of 1s, the output string should be 1.</li>
<li>If the input string contains an even number of 1s, the output string should be 0.</li>
</ul>
<p>This automaton can be represented as a state machine, with states representing the number of 1s seen so far and transitions based on the input symbols. The machine starts in an initial state and transitions between states based on the input symbols, eventually reaching a final state that determines the output.</p>
<p>In simpler terms, think of it this way: an automaton is the smallest part of a machine that can operate independently and perform a specific task. Breaking this unit further would lead us nowhere, as it is the smallest indivisible part of a machine that can perform a computation. Like, a gearbox in a car is an automaton that performs the task of changing gears, and it can&rsquo;t be broken down further into smaller parts that perform any meaningful task.</p>
<h1 id="conways-game-of-life">Conway&rsquo;s Game of Life</h1>
<p>Building on automata theory, cellular automata are computational systems used to model complex systems and nonlinear dynamics. They are made up of simple, identical units called cells that evolve in parallel at discrete time steps. The state of each cell is determined by the states of its neighbouring cells, and the cells update their states based on a set of rules. Cellular automata have been used to study a wide range of phenomena, including biological systems, physical processes, and social dynamics.</p>
<p>A fascinating aspect of cellular automata is their ability to exhibit complex and unpredictable behaviour from simple rules that mimic real-life population dynamics. Conway&rsquo;s Game of Life is a simple cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves. Specifically, the game explores how simple rules governing individual cells can lead to emergent complexity and patterns over time, including stable structures, oscillating patterns, and even patterns that exhibit motion.</p>
<p>A few rules govern the evolution of the game are as follows:</p>
<ol>
<li>
<p>Any live cell with fewer than two live neighbours dies, as if by underpopulation.


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <canvas id="lessthantwo"  style="border: 1px solid black;"  >
    </canvas>
    <span style="padding: 10px; color: black !important;">
 -->
    </span>
    <canvas id="lessthantwodead"  style="border: 1px solid black;"  >
    </canvas>
</div>
</p>
</li>
<li>
<p>Any live cell with two or three live neighbours lives on to the next generation.


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <canvas id="twoorthree"  style="border: 1px solid black;"   >
    </canvas>
    <span style="padding: 10px; color: black !important;">
 -->
    </span>
    <canvas id="twoorthreelive"  style="border: 1px solid black;"   >
    </canvas>
</div>
</p>
</li>
<li>
<p>Any live cell with more than three live neighbours dies, as if by overpopulation.


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <canvas id="morethanthree"  style="border: 1px solid black;"    >
    </canvas>
    <span style="padding: 10px; color: black !important;">
 -->
    </span>
    <canvas id="morethanthreedead"  style="border: 1px solid black;"    >
    </canvas>
</div>
</p>
</li>
<li>
<p>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <canvas id="three"  style="border: 1px solid black;">
    </canvas>
    <span style="padding: 10px; color: black !important;">
 -->
    </span>
    <canvas id="threelive"  style="border: 1px solid black;">
    </canvas>
</div>
<br>
    
</p>
</li>
</ol>
<p>The game is played on a two-dimensional grid of cells, each of which can be in one of two states: alive or dead. The game proceeds in discrete steps, with each step representing a generation of cells. At each step, the game applies the rules to each cell in the grid simultaneously, updating the grid to reflect the new state of each cell based on its current state and the states of its neighbours.</p>
<h1 id="the-game-of-life-in-action">The Game of Life in Action</h1>
<p>

<div style="text-align: start; width: 100%;">
    <button id="reset">Reset</button>
</div>
<br>
<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
<canvas id="game-of-life"  style="border: 1px solid black;">
</canvas>
</div>
<div class="container" style="display: flex; flex-direction: column; align-items: center; justify-content: center; margin-top: 20px;">
    <input type="range" id="grid-slider" name="speed" min="5" max="15" value="10">
    <label for="speed" style="margin-top: 10px;">Grid</label>
    <span id="time" style="margin-top: 10px;"></span>
    <span id="population" style="margin-top: 10px;"></span>
</div>

<div class="container" style="display: flex; align-items: center; justify-content: start; margin-top: 20px;">
    <label for="speed" style="margin-right: 10px;">Speed </label>
    <input type="range" id="speed-slider" name="speed" min="1" max="10" value="1">
</div>

<br>
<div>
    <button id="start-stop" style="margin-right: 10px;">Start</button>
</div>
<br>

<strong>Generations</strong>: <span id="generation">0</span></p>
<p>To start, design your initial configuration by clicking on the cells to toggle their state. Once you&rsquo;re ready, click the &ldquo;Start/Stop&rdquo; button to watch the game evolve. You can pause the game at any time by clicking the &ldquo;Stop&rdquo; button, and clear the grid by clicking the &ldquo;Clear&rdquo; button.</p>
<p>The speed of the game can be adjusted by changing the <code>speed</code> slider. The game will evolve at a faster pace as the slider is moved to the right. The <code>grid</code> slider can be used to adjust the size of the grid, allowing for larger or smaller configurations.</p>
<h1 id="a-turing-complete-machine">A Turing Complete Machine</h1>
<p>This might seem cool; just a game, right? It&rsquo;s more interesting than that. To explain why, I would have to make your brain hurt a little bit more.</p>
<p>Automata like these can be classified into two main categories: finite automata( finite states, finite memory) and infinite automata(infinite states, infinite memory). For example, a finite automaton can be used to recognize whether a given input string is a valid email address or a phone number(A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions">regular expression</a>). Infinite automata are more complex and powerful. For example, an infinite automaton can be used to recognize whether a given input string is a valid programming language statement or a mathematical expression. (Compilers and interpreters). Game of Life is a prime example of an infinite automaton, as it can simulate complex systems and exhibit infinite states from a fixed configuration.</p>
<p>Finite automata can be further classified into:</p>
<ol>
<li>Deterministic Finite Automata (DFA): A determined outcome for a given input.</li>
<li>Non-Deterministic Finite Automata (NFA): Various outcomes for a given input.</li>
</ol>
<p>However, both DFA and NFA:</p>
<ul>
<li>Operate on a finite amount of memory (the states).</li>
<li>Can only make decisions based on the current state and the immediate input.</li>
<li>Cannot handle languages that require unbounded memory, like those involving nested structures or long-term dependencies.</li>
</ul>
<p>To solve these issues, a Pushdown Automaton (PDA) was introduced. A PDA is an automaton with a <strong>stack</strong> that can store an unbounded amount of memory. It can push and pop symbols onto the stack, allowing it to handle <strong>context-free languages</strong>( languages that can be described by context-free grammar; languages powerful enough to describe many programming language constructs, such as nested structures (e.g., balanced parentheses, if-else blocks)) that require more complex memory access. Simply put, a PDA can recognize languages that a DFA or NFA cannot, making it a more powerful model of computation.</p>
<p>Bear with me, this useless information will make sense in a bit; I promise. The concepts of FSMs lay the groundwork for understanding why this cellular automaton is such a fascinating piece of work by this brilliant British mathematician.</p>
<p>However, a PDA still has limitations:</p>
<ul>
<li>The stack provides memory, but it&rsquo;s limited in structure (LIFO- Last in First Out).</li>
<li>It can&rsquo;t handle languages requiring more general or unbounded memory access.</li>
</ul>
<p>This led to the development of the Turing Machine, a theoretical model of computation that can simulate any algorithm or computation that can be performed by a digital computer. A Turing machine consists of an infinite tape divided into cells, a read/write head that can move left or right along the tape and a finite set of states. The machine can read the symbol on the current cell, write a new symbol, move the tape left or right, and change its state based on a set of rules.</p>
<p>Turing Machine is the pinnacle of computation, as it laid the foundation for modern computers and computational theory. It can, in theory, solve any computational problem that can be solved by a digital computer, making it a universal model of computation. Whatever we see today, from the smallest microcontroller to the most powerful supercomputers, satelite systems, and AI, all are based on the principles of the Turing Machine.</p>
<p>The Game of Life has been shown to be Turing complete, meaning it can simulate any computation that a Turing machine can perform, given the right initial conditions. Certain configurations in the Game of Life can be used to simulate logic gates, memory, and other components of a computer, demonstrating its computational universality and performing universal computation, making it a fascinating area of study for computer scientists and mathematicians alike. It has been studied extensively by computer scientists, mathematicians, and physicists, and has been used to explore a wide range of topics, including complexity theory, artificial life, and emergent behaviour.</p>
<h2 id="building-a-cpu-in-the-game-of-life">Building A CPU in the Game of Life</h2>
<p>Having come this far, let&rsquo;s attempt to build a CPU in the Game of Life. A CPU essentially is built up of three main components:</p>
<ol>
<li>ALU (Arithmetic Logic Unit): Performs arithmetic and logical operations on data.</li>
<li>Memory: Stores data and instructions that are currently being executed by the CPU.</li>
<li>Control Unit: Manages the CPU&rsquo;s operations by directing data between the ALU, memory, and I/O devices.</li>
</ol>
<h4 id="arithmetic-logic-unit">Arithmetic Logic Unit</h4>
<p>The <strong>ALU</strong> is responsible for performing arithmetic and logical operations on data. It consists of a number of logic gates, adders, and other components that work together to perform operations such as addition, subtraction, AND, OR, and NOT.


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <div style="margin: 10px;">
        <canvas id="alu-addition" style="border: 1px solid black;"></canvas>
        <div>Adder Circuit</div>
    </div>
    <div style="margin: 10px;">
        <canvas id="alu-andgate" style="border: 1px solid black;"></canvas>
        <div>AND Gate</div>
    </div>
</div>
</p>
<p>In addition, you can set up a glider collision that represents the addition of two binary values. Each glider can be thought of as representing a binary input (either 0 or 1). The gliders in this pattern are designed to approach each other from opposite directions. When two gliders collide, they interact to produce an output, which can be interpreted as the sum of the two inputs. This collision represents the addition of two binary values, with the output glider moving in a different direction depending on the inputs.</p>
<ul>
<li>If only one glider is present (input 1 + 0 or 0 + 1), it moves through without a collision, representing a result of 1.</li>
<li>If two gliders collide (input 1 + 1), they create a predictable pattern that can represent the sum of these inputs, often leaving behind a specific &ldquo;output&rdquo; glider that can represent the result.</li>
</ul>
<p>Similarly, An AND gate can be created by positioning still-life patterns (static configurations that do not change) to manipulate gliders. If both inputs are &ldquo;1&rdquo; (represented by gliders arriving simultenously), they will interact to produce an output.</p>
<ul>
<li>If both gliders arrive at the interaction point simultaneously, they will interact in a way that produces a specific pattern, representing the output 1 for an AND operation.</li>
<li>If only one glider arrives, it will pass through or interact with other cells without producing the 1 pattern, representing an output of 0.</li>
</ul>
<h2 id="memory-unit">Memory Unit</h2>
<p><strong>Memory Unit</strong> stores data and instructions that are currently being executed by the CPU. It consists of registers, cache, and main memory. It is responsible for storing and retrieving data from memory locations.</p>
<h5 id="blinker">Blinker</h5>


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <div style="margin: 10px;">
        <canvas id="memory" style="border: 1px solid black;"></canvas>
        <div>Memory Cell(1 block)</div>
    </div>
</div>


<p>This configuration is a 3x3 blinker, which oscillates between two shapes in two generations. Its oscillation does not spread or decay, so it remains contained and stable in its oscillating state.</p>
<p>Memory can be represented by stable patterns that remain constant unless disturbed by an external glider or oscillator. Stable patterns like blocks act as &ldquo;bits&rdquo; that can be toggled on or off by gliders, representing data storage. These two states can represent binary values (0 and 1) in a very simplistic way, with each state encoding one bit of information depending on its phase. This stability in position and periodic change makes it suitable for acting as a memory cell, as it reliably returns to a known state every two generations.</p>
<p>Similarly, an external pattern could be designed to change or &ldquo;write&rdquo; to the memory cell, altering its oscillation phase to represent a different binary state.</p>
<h2 id="control-unit">Control Unit</h2>
<p>The control unit manages the CPU&rsquo;s operations by directing data between the ALU, memory, and I/O devices. It fetches and decodes instructions, then signals the ALU and memory to execute.


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <div style="margin: 10px;">
        <canvas id="control" style="border: 1px solid black;"></canvas>
        <div>Control Unit</div>
    </div>
</div>
</p>
<p>This pattern is designed to function as a control unit by leveraging the behavior of known oscillators and spaceships in the Game of Life to produce predictable and repeatable outcomes. The pattern includes configurations that will evolve into gliders, which are small patterns that move across the grid over successive generations. Gliders can be used to transmit information or interact with other patterns in the grid.</p>
<h3 id="glider-gun">Glider gun</h3>
<p>A glider gun is a configuration of cells that emits gliders at regular intervals. It can be used to create a clock signal that controls the timing of operations in the CPU.</p>


<div class="container" style="display: flex; align-items: center; justify-content: center; text-align: center;">
    <div style="margin: 10px;">
        <canvas id="glider" style="border: 0.2px solid black;"></canvas>
        <div>Glider Gun</div>
    </div>
</div>

<p>A single block here can represent &lsquo;1&rsquo; and an empty cell can represent &lsquo;0&rsquo;. The glider gun emits gliders at regular intervals, which can be used to synchronize the operations of the CPU. These inputs can work with adders, logic gates, and memory cells to perform ALU operations, store data, and control the flow of information within the CPU.</p>
<h2 id="a-fully-functional-computer">A Fully Functional Computer</h2>
<p>To build a fully functional computer, you would need to design and implement a wide range of components, including registers, multiplexers, and arithmetic logic units, and connect them to form a complete system. Some of the components you would need to build include:</p>
<p>ALU components:</p>
<ul>
<li>Adders (Half and Full- they can be used to add binary numbers) <a href="/posts/game-of-life/#arithmetic-logic-unit">⏎</a></li>
<li>Logic Gates (AND, OR, NOT, XOR, etc.- they perform logical operations on binary inputs) <a href="/posts/game-of-life/#arithmetic-logic-unit">⏎</a></li>
<li>Multiplexers( MUX- they select one of many inputs and route it to the output, used to handle multiple data inputs and control signals)</li>
<li>Registers( they store data temporarily during processing and can be used to store intermediate results)</li>
</ul>
<p>Memory components:</p>
<ul>
<li>Flip-Flops (they store a single bit of data using feedback) <a href="/posts/game-of-life/#memory-unit">⏎</a></li>
<li>RAM (Random Access Memory- they store data that can be read and written to used for storing data and instructions specific to the program)</li>
<li>ROM (Read-Only Memory- they store data that can only be read from- used for storing fixed data and instructions that do not change)</li>
</ul>
<p>Control Unit components:</p>
<ul>
<li>Finite State Machines (FSM- they have a finite number of states and transition between states based on inputs) <a href="/posts/game-of-life/#control-unit">⏎</a></li>
<li>Clock Signals (they provide a timing mechanism for the CPU, controlling the rate at which operations are performed- using glider guns) <a href="/posts/game-of-life/#control-unit">⏎</a></li>
<li>Instruction Decoders (they interpret instructions and direct the flow of data within the CPU)</li>
</ul>
<h1 id="next">Next</h1>
<p>While it is theoretically possible to build a computer within the Game of Life, it is painstakingly complex and fun! It requires a deeper understanding of logic gates, instruction sets, implementing memory, and control units.</p>
<p>Building the CPU would take you to combine these components to carry out fully functional operations. It would be a fun and challenging project to undertake, requiring a deep understanding of digital logic and computer architecture. The Game of Life serves as a fascinating model of how complexity can arise from simplicity, providing insight into topics such as self-organization, emergence, and cellular automata theory.</p>
<p><a href="https://nicholas.carlini.com/writing/2021/unlimited-register-machine-game-of-life.html">Here&rsquo;s an actual CPU built in the Game of Life by Nicholas Carlini</a>. In this series of posts, he tries to explain how he built digital logic gates, multiplexers, and registers in the Game of Life. I would love to do this someday when NYU is not down my throat threatening to kick me out for not doing my assignments.</p>
<p><em>If you choose carefully enough, you can make an entire computer inside the game, powered entirely by little things running around based only on those same simple rules of what lives and what dies in the next generation. An entire computer that could, in theory, perform any calculation that your computer could. It&rsquo;s an interesting mathematical diversion depicting Turing&rsquo;s completeness, the chaos that arises from simple rules, and it just looks pretty.</em>&quot;</p>
<p>- Reddit</p>
<p>Also, someone built a <a href="https://www.youtube.com/watch?v=xP5-iIeKXE8">Game of Life inside a computer built on top of THE GAME OF LIFE!!</a></p>
]]></content:encoded></item><item><title>Fourier Series</title><link>https://cbrtl.github.io/posts/fourier/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate><guid>https://cbrtl.github.io/posts/fourier/</guid><description>An interactive guide to Fourier series</description><content:encoded><![CDATA[<blockquote>
<p><strong>NOTE:</strong> This blog post is taken from <a href="https://injuly.in/blog/fourier-series">injuly&rsquo;s website</a></p>
</blockquote>
<p>Try drawing something on the first canvas, and watch two sets of mechanical alien arms retrace your sketch:</p>


<div class="center fourier-canvas-pair">
   <canvas id="draw-canvas"  width="350" height="350" style="border: 1px solid black;"></canvas>
   <canvas id="redraw-canvas" width="350" height="350" style="border: 1px solid black;"></canvas>
</div>

<p>Once you&rsquo;re done with this introduction to Fourier analysis, you&rsquo;ll be capable of making this (and a lot more) yourself.</p>
<p>The satisfying animation is made possible by the subject of this post - an infinite sum called <a href="https://en.wikipedia.org/wiki/Fourier_series">the Fourier series</a>.
The formula is short, and with some effort, you can memorize it.
However, I implore you to understand where the series comes from, and build deeper intuition for it.</p>
<p>To keep you from clicking off this page,
I&rsquo;ll defer the proof and origin of this equation to the second half,
and thread some interactive animations through the body of this write-up.</p>
<h2 id="adding-functions">Adding functions</h2>
<p>Surely, you&rsquo;re familiar with the addition of numbers, vectors and matrices.
Adding functions is not so different.
The addition of two functions \(f\) and \(g\) at input \(x\) is simply \(f(x) + g(x)\).</p>
<p>Put more formally - \((f + g)(x) = f(x) + g(x)\).</p>
<p>Let&rsquo;s visualize this by taking an example.
Assume <code>f</code> is \(2sin(x)\) and <code>g</code> is \(cos(2x)\).</p>
<p>Their sum then, can be given by a function - \(h(x) = 2sin(x) + cos(2x)\).</p>
<p>The graph below plots \(f\) and \(g\) in shades of gray, and their sum, \(h\), in red.</p>


<div class="center">
   <canvas id="fun-sum" width="350px" height="350px"></canvas>
</div>

<p>Note how in some places, the values of \(f\) and \(g\) are both positive, and their sum is therefore a larger positive number,
while in other places, \(f\) and \(g\) have opposite signs and their values cancel out to a smaller number.</p>
<p>Through the lens of physics, you could look at the functions as two electromagnetic waves, or just visible light rays oscillating in the domain of time.
When two such waves overlap with each other in space, they&rsquo;re said to be in <a href="https://www.britannica.com/science/principle-of-superposition-wave-motion">superposition</a>.
The superposition of two waves results in the sum of both waves.</p>
<p>When two points in a wave supplement each other to result in a higher amplitude (the y-value),
their interaction is termed &ldquo;constructive interference&rdquo;.
When they cancel each other out, it&rsquo;s called &ldquo;destructive interference&rdquo;.</p>
<p>Go through the last two paragraphs again, and try to digest this idea.
Now, imagine if we had to work our way backwards.
Say we are given a list containing the (x, y) coordinates of all points along the curve of \(h\),
where \(x\) is time and \(y\) is the corresponding output of \(h\) at that point in time.
We have to come up with two simpler periodic functions that sum up to \(h\).</p>
<p>This is exactly what the Fourier series does.</p>
<p>There are several ways to interpret interference in the real world.
If \(f\) and \(g\) were sound waves, their constructive interference would make loud noise, while the destructive interference would produce a quieter sound.
If they were light waves instead, their constructive interference would reveal bright spots on a reflective surface,
and destructive would look like dim patches.</p>
<p>Applications of the Fourier series spill into almost every domain -
signal processing, image compression, shape recognition,
analog transmission, noise cancellation, studying thermodynamic systems
and fitting equations to datasets.</p>
<p>From this wide array of applications, We show our interest in the science of tracing ugly sketches.</p>
<h2 id="decomposing-periodic-functions">Decomposing periodic functions.</h2>
<p>Imagine you had a machine that could scan any food item and display its recipe.
Fourier series does exactly that, except for mathematical functions.</p>
<p>The Fourier series of any periodic function \(f(x)\) with a frequency of \(\omega_0\) is described as:</p>


<div class="tex">
   $$
   f(x) = a_0/2 + \sum_{n=1}^{\infty}b_n sin(n\omega_0x) + \sum_{n=1}^{\infty}a_n cos(n\omega_0x)
   $$
</div>

<p>Meaning that for every periodic function \(f\),
there exists a set of coefficients \(a\) and \(b\),
such that \(f(x)\) can be expressed as an infinite sum of sine and cosine terms of increasing frequencies where the
\(nth\) sine term has a coefficient of \(b_n\) and the \(nth\) cosine term has a coefficient of \(a_n\).
The values of these coefficients are given by the following formulae:</p>
<p>$$
a_n = \int_0^T{f(x)cos(nw_0x)}
$$</p>
<p>$$
b_n = \int_0^T{f(x)sin(nw_0x)}
$$</p>
<p>The interval of integration, \(T\), is the fundamental period of the function.
\(T\) and \(\omega_0\) are related by this equation:</p>
<p>$$
\omega_0 = 2\pi/T
$$</p>
<p>If that was too wordy and made little sense to you, that&rsquo;s okay.
We&rsquo;ll prove this equation later in the post.
Until then, an example will help understand this better.</p>
<p>Consider the square wave - a periodic signal that alternates between 1 and -1 depending on its input.
Formally, it is described like so:</p>
<p>$$
f(t) = 4 \lfloor{t}\rfloor - 2\lfloor2t\rfloor + 1
$$</p>
<p>Here&rsquo;s how it looks when graphed out:</p>


<div class="center">
   <canvas id="square-wave-graph" width="350" height="350"></canvas>
</div>

<p>If we use the first few terms from \(f\)&rsquo;s Fourier series, we can closely approximate the behavior of this function.
In the following graph, the gray curve represents the the square wave and the red curve represents our approximation of it.
You can play with the slider to alter the number of terms we take from the series and see how that changes our approximation.</p>


<div class="center">
   <canvas id="square-wave-fourier-graph" width="350" height="350"></canvas>
      <div className="controls" style="display: 'flex'; gap: 2rem;">
        <input
          type="range"
          min="1"
          max="50"
          value="4"
          id="square-fs-slider"
          style="width: 300px"
        ></input>
      </div>
</div>

<p>Clearly, our approximation improves as we take more terms from the series.
The Fourier series can be proven to <a href="https://en.wikipedia.org/wiki/Convergent_series">converge</a>.
This means that if we take an infinite number of terms from the series, we can get the <em>exact</em> value of \(f(x)\) for any \(x\).</p>
<p>Of course, it is not possible to add up infinite terms in computers.
Instead, we decide upon a fixed number of terms that approximate our function well enough for most practical purposes.</p>
<p>Whenever I say &ldquo;Fourier series of a function&rdquo;, I mean a series of simple periodic functions that can be added at any given input to approximate the output of the original function at the same input.
For the remainder of this post our goal with Fourier series is to <strong>approximate periodic functions with sums of simpler sine/cosine functions</strong>.</p>
<h2 id="drawing-with-the-fourier-series">Drawing with the Fourier series</h2>
<p>If you wish to understand how the Fourier series works before seeing it in action,
you can skip this section and read ahead to <a href="/posts/fourier/#proof">the proof</a>, then come back here.</p>
<p>So, How do we go from decomposing time domain functions to recreating sketches?</p>
<p>Imagine you&rsquo;re drawing a sketch on a square sheet of paper.
You are to draw your sketch, start to finish, without lifting the nib of your pen from the paper&rsquo;s surface.
In other words, your sketch must be <em>continuous</em> with no &ldquo;breaks&rdquo; in between.</p>
<p>Assume also that the bottom-left corner of the sheet is its origin.
Once you start drawing, I can delineate the position of the pen&rsquo;s tip using a pair of coordinates \((x, y)\) at any given point in time.</p>
<p>Much like a cartesian plane, the \(x\) coordinate represents the horizontal distance from the origin, and \(y\) the vertical.
Both the x and y coordinates change as the pen moves on the sheet&rsquo;s surface.
Meaning, the position of the x-coordinate of your pen&rsquo;s tip can be written as a function of time.
Say you draw this figure:</p>


<div class="center">
   <canvas id="rabbit-canvas" width="350" height="350"> </canvas>
</div>

<p>If we plot the x and y-coordinates independently as functions of time, they&rsquo;ll form curves that look like this:</p>


<div class="center">
   <canvas id="rabbit-plot-canvas" width="350" height="350"> </canvas>
</div>

<p>The blue curve represents the values of x-coordinates of your sketch.
The vertical axis represents the x-value, and the horizontal axis represents time.
Similarly, the red curve plots the y-coordinates.</p>
<p>Both these curves can be viewed as functions of time.
The blue curve represents a function \(x(t)\) that returns the x-position of the pen&rsquo;s tip at time \(t\),
Similarly, the red curve is a function \(y(t)\) which the same for its y-position.
For each of these functions, we can find a Fourier series that approximates it.</p>
<p>Let \(f_x(t)\) and \(f_y(t)\) be the Fourier approximations for \(x(t)\) and \(y(t)\) respectively.
Then recreating the sketch requires computing the values returned by <code>f_t</code> and <code>y_t</code> over a range of values of t.
then pairing them into <code>(x, y)</code> coordinates and connecting the coordinates with lines.
Here is some pseudo-typescript code that mimics this logic:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="font-style:italic">// The &#34;dt&#34; is our time step.
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">// In the real world, a line is an infinitely long series of points.
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">// In computers, we take a &#34;snapshot&#34; of the pen&#39;s position
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">// every dt seconds and join these positions with straight lines to
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">// trace the curve. Smaller values of dt require more computation,
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">// and yield better results.
</span></span></span><span style="display:flex;"><span><span style="font-style:italic"></span><span style="font-weight:bold">const</span> dt = 0.01;
</span></span><span style="display:flex;"><span><span style="font-weight:bold">const</span> f_x = fourier_series(x); <span style="font-style:italic">// type of x is (t: number) =&gt; number
</span></span></span><span style="display:flex;"><span><span style="font-style:italic"></span><span style="font-weight:bold">const</span> f_y = fourier_series(y); <span style="font-style:italic">// type of y is (t: number) =&gt; number
</span></span></span><span style="display:flex;"><span><span style="font-style:italic"></span><span style="font-weight:bold">let</span> prev_point = [f_x(0), f_y(0)];
</span></span><span style="display:flex;"><span><span style="font-weight:bold">for</span> (<span style="font-weight:bold">let</span> t = 0.01; t &lt; 1; t += dt) {
</span></span><span style="display:flex;"><span>  <span style="font-weight:bold">const</span> current_point = [f_x(t), f_y(t)];
</span></span><span style="display:flex;"><span>  draw_line(prev_point, current_point);
</span></span><span style="display:flex;"><span>  prev_point = current_point;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The approximation generated by this method is shown below.
Just as before, you can play with the slider to adjust the number of terms used in approximation of the sketch.</p>


<div class="center">
   <canvas id="rabbit-recreate-canvas" width="300" height="300"> </canvas>
     <div className="controls" style="display: 'flex'; gap: 2rem;">
        <input
          type="range"
          min="1"
          max="50"
          value="12"
          id="rabbit-slider"
          style="width: 300px"
        ></input>
      </div>
</div>

<p>Keep in mind that <code>f_x</code> and <code>f_y</code> are really just sums of simpler sine/cosine functions, calculated using Fourier&rsquo;s formulae.</p>
<p>You may be wondering - the functions \(x(t)\) and \(y(t)\) aren&rsquo;t periodic, how come we can still decompose them into sine/cosine sums?
One trick is to set the period to infinity, and compute the series at this limit.</p>
<p>In my code, I just set the period to 1 time unit, and assume that the pen just retraces the drawing again and again.
Meaning that \(x(t + 1) = x(0)\).
This makes the math a lot easier, and certainly doesn&rsquo;t make a difference in the outcome.</p>
<p>To be more clear, when the sketch starts, the time is assumed to be 0, and when it ends, the time is assumed to be 1 second.
Every time point in between is scaled accordingly. This is not necessary of course, you could set the time period to however long it took to draw the first sketch, if that makes things simpler for you.</p>
<h2 id="epicycles">Epicycles</h2>
<p>The final caveat are the epicycles.
It is easy to just plot the values returned by \(f_x\) and \(f_y\) on the cartesian plane.
But how do we animate this using revolving circles?</p>
<p>If you&rsquo;ve followed the contents of this article so far, you already know how to recreate sketches.
To animate them, you need to understand <a href="https://en.wikipedia.org/wiki/Polar_coordinate_system">The polar coordinate system</a>.</p>
<p>You can read the wikipedia article, or <a href="https://www.mathsisfun.com/polar-cartesian-coordinates.html">this article</a> to build some intuition for conversion between cartesian and polar coordinates.</p>
<p>In the polar coordinate system, a periodic function with period \(T\) is a vector that rotates around the origin, and completes one full rotation around itself every \(T\) time units.
Look at the graph of \(sin(t)\) in Polar form, for example:</p>


<div class="center">
   <canvas id="polar-sine" width="350" height="350"></canvas>
</div>

<p>Note how the y-coordinates of the vector&rsquo;s tip traces out a regular sine wave.
You can just as easily plot any periodic function in the polar coordinate system.
To add two periodic functions together, take one rotating vector and center it on the tip of the another rotating vector.
The end result is shown below.
The following animation shows 3 rotating vectors added together, each representing a periodic function:</p>


<div class="center">
   <canvas id="two-rotating-vectors" width="350" height="350"></canvas>
</div>

<p>To convert a sketch to an epicycle animation then, all we need is to convert a term in the Fourier series from cartesian to polar coordinates.
Once we have that, we can add up the terms like in the animation above, and figure out the x and y-coordinates using two sets of epicycles, each representing the Fourier approximation for \(x(t)\) or \(y(t)\).</p>
<p>To do this conversion, we can use the <a href="https://en.wikipedia.org/wiki/Fourier_series#Amplitude-phase_form">polar form of the Fourier series</a>.
Precisely, these are the steps you need to follow:</p>
<ol>
<li>Represent the sketch as a list of points drawn over a period of time.</li>
<li>Convert the list of points into a two separate lists, one containing the x-coordinates of the sketch, and other the y.</li>
<li>Convert each list into a function (I use <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L58">this simple helper</a>).
Now, you have the \(x(t)\) and \(y(t)\).</li>
<li>For each function, find its Fourier series coefficients. <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/fourier.ts#L16">Here</a> is how I do it.</li>
<li>For each function, <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L93">convert the Fourier series coefficients into a set of polar functions</a>.</li>
<li>Using a time step of <code>dt</code>, find the final x and y positions of our approximation, and <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/components/RedrawCanvas.tsx#L21">draw them on a canvas</a>.</li>
</ol>
<p>If you do everything correctly, you should get something like this:</p>


<div class="center">
   <canvas id="rabbit-epicycle" width="350" height="350"></canvas>
</div>

<p>There is a more novel approach to retracing sketches that involves using only one set of epicycles.
It uses <a href="https://en.wikipedia.org/wiki/Fourier_series#Complex-valued_functions">the complex Fourier Series</a>, and is also fewer lines of code.
When you&rsquo;re new to this concept however, it may throw you off balance, especially if you&rsquo;re not familiar with imaginary numbers and the Argand plane.</p>
<h2 id="proof">Proof</h2>
<p>When I set out to find an &ldquo;intuitive&rdquo; proof for the Fourier series,
all I saw were proofs that begin by stating the equation,
and then proving it by finding the coefficients \(a_n\) and \(b_n\) using integrals.
But where did the equation come from?</p>
<p>Did God whisper it to Joseph Fourier in his dreams?</p>
<p>Did he just happen to run into it by chance?</p>
<p>Surprisingly, the answer is &ldquo;yes&rdquo;.
Of course, he had an unparalleled instinct for math that he whetted with years of practice and research.
There has to be a certain train of thought that he boarded to arrive at this revelation, that any periodic signal can be represented as a sum of simpler harmonics.
But that line of thinking was never publicized, and as you&rsquo;ll see in the next section, there have been people who&rsquo;ve thought of this even before Fourier himself did!</p>
<p>The important part is that Fourier asked a question that was mocked as stupid and bizarre until he presented a proof.
And that proof does in fact begin by stating the following hypothesis:</p>
<p>$$
f_o(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)}
$$</p>
<p>Here, \(f_o\) is an odd function with a fundamental period of \(w_0\).
If we can derive a value for \(b_n\) from this equation, we can be convinced that <strong>any odd function can be represented as a sum of sinusoids</strong>.</p>
<p>Now, consider an even function \(f_e\) with a period of \(w_0\):</p>
<p>$$
f_e(t) = \sum_{n=0}^{\infty}a_n cos(n w_0 t)
$$</p>
<p>If we can derive a value for \(a_n\) from this equation, we can be convinced that <strong>any even function can be represented as a sum of co-sinusoids</strong>.</p>
<p>When you combine these two equations with the idea that <a href="https://en.wikipedia.org/wiki/Even_and_odd_functions#Even%E2%80%93odd_decomposition">any periodic function can be represented as a sum of odd and an even function</a>, you get:</p>
<p>$$
f_o(t) + f_e(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)} + \sum_{n=0}^{\infty}a_n cos(n w_0 t)
$$</p>
<p>We can turn the order of this proof, and first say that given any function \(f(t)\), we can find its odd and even parts using the odd-even decomposition rule.
Then, we can represent the odd part as a sum of sinusoids, and the even part as a sum of co-sinusoids.</p>
<p>Now, all that&rsquo;s left is to derive the values for \(a_n\) and \(b_n\) using the two equations stated above.
This is where I save myself the trouble of writing more LaTeX, and defer you to <a href="http://lpsa.swarthmore.edu/Fourier/Series/DerFS.html">this excellent proof</a> by professors from Swarthmore college.
I know I said I&rsquo;d walk you through the proof, but I can&rsquo;t do a better job of it than the electronics professors at Swarthmore did already.
I&rsquo;d hate to repeat their work and not give credit.
If you follow the page I linked, you&rsquo;ll realize that the proof only uses basic calculus and trigonometric identities taught in high school.</p>
<h2 id="origins">Origins</h2>
<p>You&rsquo;ll be surprised to learn that the idea behind the series predates Fourier himself.</p>
<p>2 centuries before Fourier, <a href="https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss">Carl Friedrich Gauss</a> created several algorithms to aid his study of astronomy.
He was one of the many applied mathematicians who wanted to predict the position of Ceres in the night sky.
One of the algorithms he discovered in this quest, was the <a href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier Transform</a> - a function that is very closely related with the Fourier Series.
However, he never published his work because he believed his method to be an unimportant detail in his achievement of estimating Ceres&rsquo; position.</p>
<p>In the 1700s, Euler had found applications for decomposing periodic functions with Fourier Series.</p>
<p>Half a century before Fourier, <a href="https://en.wikipedia.org/wiki/Daniel_Bernoulli">Bernoulli</a> was studying the motion of a string.
He proposed the idea that periodic functions can be represented as sums of harmonics.
Nobody at the time believed this to be a general method, and his ideas were left unexplored.</p>
<p>Things changed in 1807, when a French math wizard named Joseph Fourier found himself studying the heat equation in a metal plate.
In his search for a solution, he sought to ask a seemingly absurd question:</p>
<p><em>Can we represent any periodic function as a sum of simple sine and cosine functions?</em></p>
<p>Precisely, he sought to represent any periodic function \(f(x)\) with a frequency of \(\omega_0\) , in the following form:</p>


<div class="tex">
   $$
   f(x) = (a_0 + a_1 cos(\omega_0 t) + a_2 cos(2\omega_0 t) + ... + a_n cos(n\omega_0t)) + (b_1 sin(\omega_0 t) + b_1 sin(2\omega_0 t) + ... + b_n sin(n\omega_0t)
   $$
</div>

<p>Revered mathematicians of the time, including Langrange and Laplace, rejected this idea as informal and hand-wavy.
The panel evaluating his findings said:</p>
<p><em>&ldquo;The manner in which the author arrives at these equations is not exempt of difficulties and&hellip;his analysis to integrate them still leaves something to be desired on the score of generality and even rigour.&rdquo;</em>
Perhaps this was because of a lack of reasoning as to <em>why</em> one should even begin to think of periodic functions this way.</p>
<p>It&rsquo;s not unheard of mathematical ideas to sprout into existence out of seemingly ridiculous places.
Ramanujan attributed some of his major findings to God, and dipped at the age of 32.</p>
<p>After the Fourier Series was accepted by the scientific populace, it spawned a new field of research, called Fourier analysis.
Developments in this field found everyday use in almost every science.</p>
<h2 id="applications">Applications</h2>
<p>By this point, you know enough about Fourier analysis to delve deeper into it yourself.
It would be a shame to blunt the edge of theory by not applying it in practice.</p>
<p>Here a few things you could do:</p>
<ul>
<li>Implement noise reduction in sounds.</li>
<li>Sharpen images with denoising.</li>
<li>Write a <a href="https://en.wikipedia.org/wiki/JPEG">JPEG</a> encoder/decoder.</li>
<li><a href="https://www.johndcook.com/blog/2011/06/21/how-to-fit-an-elephant/">Fit an elephant</a></li>
<li>Write basic shape recognizers.</li>
</ul>
<h2 id="resources-and-further-reading">Resources and further reading</h2>
<ul>
<li>3b1b - <a href="https://www.youtube.com/watch?v=r6sGWTCMz2k">But what is a Fourier series?</a>.</li>
<li>Swarthmore college - <a href="http://lpsa.swarthmore.edu/Fourier/Series/WhyFS.html">The fourier series</a>.</li>
<li>Jez Swanson - <a href="https://www.jezzamon.com/fourier/index.html">An interactive introduction to the fourier transform</a>.</li>
<li>Tony Rosler - <a href="https://www.myfourierepicycles.com/">myFourierEpicycles</a></li>
</ul>


<!-- mathjax -->
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<script src="https://polyfill.io/v3/polyfill.min.js?features=es6">
</script>

<!-- lodash -->
<script type = "text/javascript" 
   src = "https://cdn.jsdelivr.net/npm/lodash@4.17.20/lodash.min.js">
</script>


<!-- pts.js -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/williamngan/pts/dist/pts.js"></script>

<!-- script for this post -->
<script type="module" src="/js/fourier-series/index.js" ></script>

]]></content:encoded></item></channel></rss>