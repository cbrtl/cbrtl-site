<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cbrtl</title>
    <link>https://cbrtl.github.io/</link>
    <description>Recent content on cbrtl</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 08 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cbrtl.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello world!</title>
      <link>https://cbrtl.github.io/posts/what-and-why/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/what-and-why/</guid>
      <description>cbrtl - now live</description>
      <content:encoded><![CDATA[<h1 id="what-is-cbrtl">What is cbrtl?</h1>
<p><strong>cbrtl</strong> is an attempt at creating a tight knit group of programmers to showcase and collaborate
on projects and</p>
<h2 id="what-do-we-do-here">What do we do here?</h2>
<ul>
<li><strong>Create</strong> fun projects. Either in groups or in isolation.</li>
<li>Organize community and online <strong>showcases</strong> for group and individual projects.</li>
<li><strong>Contribute</strong> to Open Source projects both in cbrtl and in other communities.</li>
<li>Conduct <strong>code reviews</strong> and <strong>JAM</strong>s.</li>
<li>Share <strong>resources</strong> to learn.</li>
<li>Create and maintain <strong>dev-journals and blogs</strong>.</li>
</ul>
<h2 id="what-is-the-end-goal">What is the end goal?</h2>
<p>Merely to promote Open Source culture and proper software development within our college.</p>
<h2 id="how-far-down-the-road-are-we">How far down the road are we?</h2>
<p>Not that far, the egg has just been laid.
As of the time of writing this post, we have just started out.
For the effort to work out, we welcome interested folks over :)</p>
<h2 id="what-can-i-do">What can I do?</h2>
<p>Just what you&rsquo;ve been doing so far, but with more people!</p>
<p>If you have any interesting projects that you have already been working on,
let us know and we&rsquo;ll put them on the cbrtl page for more people to see.
Note that there is some criteria that projects must qualify, some of these are intentionally vague.
But as long as you&rsquo;re doing more than following a course or tutorial, it&rsquo;s likely to be accepted :)</p>
<h1 id="volunteering-to-cbrtl">Volunteering to cbrtl</h1>
<p>We are looking for volunteers for some roles.
Note however, that there is no strict mandate for responsibilities.
As long as you&rsquo;re capable of adding <em>something</em> of value, no matter how small, shoot us a message!
We&rsquo;re looking for some help with:</p>
<ul>
<li>
<p><strong>Code reviewers</strong>: If you have experience contributing to FOSS or writing code for user/developer
facing products, perhaps you can volunteer and help us out here :)</p>
</li>
<li>
<p><strong>Editors</strong>: We plan on writing frequent blog posts.
But both the technical content and the english material can use a second pair of eyes to help catch mistakes or inconsistent writing.
If you have done some technical writing before, you can volunteer for reviewing the content in blog posts!</p>
</li>
<li>
<p><strong>Technical Writers</strong>: If you have experience writing code but are usually on a tight schedule, you
may be able to join us and share your knowledge. We want to mandate a high quality in our posts, so any
tutorial/how-to guide that has been done a million times before is generally discouraged. We want
to avoid redundant topics like &ldquo;How to build a todo app with React&rdquo; and promote posts and dev-logs /
journals that are fun to read and explore.</p>
</li>
<li>
<p><strong>Frontend devs</strong>: Currently, the cbrtl website is bland and not-so-catchy.
While minimalism is the core idea, we can definitely use some front-end developers to help keep the UI fresh, responsive and modern.</p>
</li>
<li>
<p><strong>Moderators</strong>: To help keep the community together on discord and github.</p>
</li>
</ul>
<p><strong>NOTE</strong> We do not expect any amount of time commitment from volunteers, as long as you can make small
contributions, we appreciate it.
Volunteering is not druge work, and active frequent contributions are appreciated, but not required.</p>
<h1 id="the-kind-of-software-we-want-to-write">The kind of software we want to write</h1>
<p>We firmly believe in re-inventing the wheel.
Writing software close to the metal helps us closely understand the behind-the-scenes of software that most take for granted.
While any creative project is welcome, here are some ideas that adhere to the spirit:</p>
<ul>
<li>Compilers</li>
<li>Virtual Machines and Interpreters</li>
<li>Game Engines</li>
<li>Operating Systems</li>
<li>Search Engines</li>
<li>Database engines</li>
<li>Voxel renderers</li>
<li>TCP/IP stack</li>
<li>VCS</li>
</ul>
<p>All of these are but regular software that we tend to take for granted, that can be (and have been) written from scratch.
We encourage all kinds of creative projects no matter how basic.
But you can expect the above group projects to come to life as the community grows.</p>
<h2 id="showcasing-your-project">Showcasing your project</h2>
<p><a href="https://cbrtl.github.io/posts/project-showcase/">This</a> post has more on that.
If you want to showcase your project on our github org, then reach out to us on discord or the mailing list.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Fourier Series</title>
      <link>https://cbrtl.github.io/posts/fourier/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/fourier/</guid>
      <description>An interactive guide to Fourier series</description>
      <content:encoded><![CDATA[<p>Try drawing something on the first canvas, and watch two sets of mechanical alien arms retrace your sketch:</p>
<!-- raw HTML omitted -->
<p>Once you&rsquo;re done with this introduction to Fourier analysis, you&rsquo;ll be capable of making this (and a lot more) yourself.</p>
<p>The satisfying animation is made possible by the subject of this post - an infinite sum called <a href="https://en.wikipedia.org/wiki/Fourier_series">the Fourier series</a>.
The formula is short, and with some effort, you can memorize it.
However, I implore you to understand where the series comes from, and build deeper intuition for it.</p>
<p>To keep you from clicking off this page,
I&rsquo;ll defer the proof and origin of this equation to the second half,
and thread some interactive animations through the body of this write-up.</p>
<h2 id="adding-functions">Adding functions</h2>
<p>Surely, you&rsquo;re familiar with the addition of numbers, vectors and matrices.
Adding functions is not so different.
The addition of two functions \(f\) and \(g\) at input \(x\) is simply \(f(x) + g(x)\).</p>
<p>Put more formally - \((f + g)(x) = f(x) + g(x)\).</p>
<p>Let&rsquo;s visualize this by taking an example.
Assume <code>f</code> is \(2sin(x)\) and <code>g</code> is \(cos(2x)\).</p>
<p>Their sum then, can be given by a function - \(h(x) = 2sin(x) + cos(2x)\).</p>
<p>The graph below plots \(f\) and \(g\) in shades of gray, and their sum, \(h\), in red.</p>
<!-- raw HTML omitted -->
<p>Note how in some places, the values of \(f\) and \(g\) are both positive, and their sum is therefore a larger positive number,
while in other places, \(f\) and \(g\) have opposite signs and their values cancel out to a smaller number.</p>
<p>Through the lens of physics, you could look at the functions as two electromagnetic waves, or just visible light rays oscillating in the domain of time.
When two such waves overlap with each other in space, they&rsquo;re said to be in <a href="https://www.britannica.com/science/principle-of-superposition-wave-motion">superposition</a>.
The superposition of two waves results in the sum of both waves.</p>
<p>When two points in a wave supplement each other to result in a higher amplitude (the y-value),
their interaction is termed &ldquo;constructive interference&rdquo;.
When they cancel each other out, it&rsquo;s called &ldquo;destructive interference&rdquo;.</p>
<p>Go through the last two paragraphs again, and try to digest this idea.
Now, imagine if we had to work our way backwards.
Say we are given a list containing the (x, y) coordinates of all points along the curve of \(h\),
where \(x\) is time and \(y\) is the corresponding output of \(h\) at that point in time.
We have to come up with two simpler periodic functions that sum up to \(h\).</p>
<p>This is exactly what the Fourier series does.</p>
<p>There are several ways to interpret interference in the real world.
If \(f\) and \(g\) were sound waves, their constructive interference would make loud noise, while the destructive interference would produce a quieter sound.
If they were light waves instead, their constructive interference would reveal bright spots on a reflective surface,
and destructive would look like dim patches.</p>
<p>Applications of the Fourier series spill into almost every domain -
signal processing, image compression, shape recognition,
analog transmission, noise cancellation, studying thermodynamic systems
and fitting equations to datasets.</p>
<p>From this wide array of applications, We show our interest in the science of tracing ugly sketches.</p>
<h2 id="decomposing-periodic-functions">Decomposing periodic functions.</h2>
<p>Imagine you had a machine that could scan any food item and display its recipe.
Fourier series does exactly that, except for mathematical functions.</p>
<p>The Fourier series of any periodic function \(f(x)\) with a frequency of \(\omega_0\) is described as:</p>
<!-- raw HTML omitted -->
<p>Meaning that for every periodic function \(f\),
there exists a set of coefficients \(a\) and \(b\),
such that \(f(x)\) can be expressed as an infinite sum of sine and cosine terms of increasing frequencies where the
\(nth\) sine term has a coefficient of \(b_n\) and the \(nth\) cosine term has a coefficient of \(a_n\).
The values of these coefficients are given by the following formulae:</p>
<p>$$
a_n = \int_0^T{f(x)cos(nw_0x)}
$$</p>
<p>$$
b_n = \int_0^T{f(x)sin(nw_0x)}
$$</p>
<p>The interval of integration, \(T\), is the fundamental period of the function.
\(T\) and \(\omega_0\) are related by this equation:</p>
<p>$$
\omega_0 = 2\pi/T
$$</p>
<p>If that was too wordy and made little sense to you, that&rsquo;s okay.
We&rsquo;ll prove this equation later in the post.
Until then, an example will help understand this better.</p>
<p>Consider the square wave - a periodic signal that alternates between 1 and -1 depending on its input.
Formally, it is described like so:</p>
<p>$$
f(t) = 4 \lfloor{t}\rfloor - 2\lfloor2t\rfloor + 1
$$</p>
<p>Here&rsquo;s how it looks when graphed out:</p>
<!-- raw HTML omitted -->
<p>If we use the first few terms from \(f\)&rsquo;s Fourier series, we can closely approximate the behavior of this function.
In the following graph, the gray curve represents the the square wave and the red curve represents our approximation of it.
You can play with the slider to alter the number of terms we take from the series and see how that changes our approximation.</p>
<!-- raw HTML omitted -->
<p>Clearly, our approximation improves as we take more terms from the series.
The Fourier series can be proven to <a href="https://en.wikipedia.org/wiki/Convergent_series">converge</a>.
This means that if we take an infinite number of terms from the series, we can get the <em>exact</em> value of \(f(x)\) for any \(x\).</p>
<p>Of course, it is not possible to add up infinite terms in computers.
Instead, we decide upon a fixed number of terms that approximate our function well enough for most practical purposes.</p>
<p>Whenever I say &ldquo;Fourier series of a function&rdquo;, I mean a series of simple periodic functions that can be added at any given input to approximate the output of the original function at the same input.
For the remainder of this post our goal with Fourier series is to <strong>approximate periodic functions with sums of simpler sine/cosine functions</strong>.</p>
<h2 id="drawing-with-the-fourier-series">Drawing with the Fourier series</h2>
<p>If you wish to understand how the Fourier series works before seeing it in action,
you can skip this section and read ahead to <a href="#proof">the proof</a>, then come back here.</p>
<p>So, How do we go from decomposing time domain functions to recreating sketches?</p>
<p>Imagine you&rsquo;re drawing a sketch on a square sheet of paper.
You are to draw your sketch, start to finish, without lifting the nib of your pen from the paper&rsquo;s surface.
In other words, your sketch must be <em>continuous</em> with no &ldquo;breaks&rdquo; in between.</p>
<p>Assume also that the bottom-left corner of the sheet is its origin.
Once you start drawing, I can delineate the position of the pen&rsquo;s tip using a pair of coordinates \((x, y)\) at any given point in time.</p>
<p>Much like a cartesian plane, the \(x\) coordinate represents the horizontal distance from the origin, and \(y\) the vertical.
Both the x and y coordinates change as the pen moves on the sheet&rsquo;s surface.
Meaning, the position of the x-coordinate of your pen&rsquo;s tip can be written as a function of time.
Say you draw this figure:</p>
<!-- raw HTML omitted -->
<p>If we plot the x and y-coordinates independently as functions of time, they&rsquo;ll form curves that look like this:</p>
<!-- raw HTML omitted -->
<p>The blue curve represents the values of x-coordinates of your sketch.
The vertical axis represents the x-value, and the horizontal axis represents time.
Similarly, the red curve plots the y-coordinates.</p>
<p>Both these curves can be viewed as functions of time.
The blue curve represents a function \(x(t)\) that returns the x-position of the pen&rsquo;s tip at time \(t\),
Similarly, the red curve is a function \(y(t)\) which the same for its y-position.
For each of these functions, we can find a Fourier series that approximates it.</p>
<p>Let \(f_x(t)\) and \(f_y(t)\) be the Fourier approximations for \(x(t)\) and \(y(t)\) respectively.
Then recreating the sketch requires computing the values returned by <code>f_t</code> and <code>y_t</code> over a range of values of t.
then pairing them into <code>(x, y)</code> coordinates and connecting the coordinates with lines.
Here is some pseudo-typescript code that mimics this logic:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-typescript" data-lang="typescript"><span style="font-style:italic">// The &#34;dt&#34; is our time step.
</span><span style="font-style:italic">// In the real world, a line is an infinitely long series of points.
</span><span style="font-style:italic">// In computers, we take a &#34;snapshot&#34; of the pen&#39;s position
</span><span style="font-style:italic">// every dt seconds and join these positions with straight lines to
</span><span style="font-style:italic">// trace the curve. Smaller values of dt require more computation,
</span><span style="font-style:italic">// and yield better results.
</span><span style="font-style:italic"></span><span style="font-weight:bold">const</span> dt = 0.01;
<span style="font-weight:bold">const</span> f_x = fourier_series(x); <span style="font-style:italic">// type of x is (t: number) =&gt; number
</span><span style="font-style:italic"></span><span style="font-weight:bold">const</span> f_y = fourier_series(y); <span style="font-style:italic">// type of y is (t: number) =&gt; number
</span><span style="font-style:italic"></span><span style="font-weight:bold">let</span> prev_point = [f_x(0), f_y(0)];
<span style="font-weight:bold">for</span> (<span style="font-weight:bold">let</span> t = 0.01; t &lt; 1; t += dt) {
  <span style="font-weight:bold">const</span> current_point = [f_x(t), f_y(t)];
  draw_line(prev_point, current_point);
  prev_point = current_point;
}
</code></pre></div><p>The approximation generated by this method is shown below.
Just as before, you can play with the slider to adjust the number of terms used in approximation of the sketch.</p>
<!-- raw HTML omitted -->
<p>Keep in mind that <code>f_x</code> and <code>f_y</code> are really just sums of simpler sine/cosine functions, calculated using Fourier&rsquo;s formulae.</p>
<p>You may be wondering - the functions \(x(t)\) and \(y(t)\) aren&rsquo;t periodic, how come we can still decompose them into sine/cosine sums?
One trick is to set the period to infinity, and compute the series at this limit.</p>
<p>In my code, I just set the period to 1 time unit, and assume that the pen just retraces the drawing again and again.
Meaning that \(x(t + 1) = x(0)\).
This makes the math a lot easier, and certainly doesn&rsquo;t make a difference in the outcome.</p>
<p>To be more clear, when the sketch starts, the time is assumed to be 0, and when it ends, the time is assumed to be 1 second.
Every time point in between is scaled accordingly. This is not necessary of course, you could set the time period to however long it took to draw the first sketch, if that makes things simpler for you.</p>
<h2 id="epicycles">Epicycles</h2>
<p>The final caveat are the epicycles.
It is easy to just plot the values returned by \(f_x\) and \(f_y\) on the cartesian plane.
But how do we animate this using revolving circles?</p>
<p>If you&rsquo;ve followed the contents of this article so far, you already know how to recreate sketches.
To animate them, you need to understand <a href="https://en.wikipedia.org/wiki/Polar_coordinate_system">The polar coordinate system</a>.</p>
<p>You can read the wikipedia article, or <a href="https://www.mathsisfun.com/polar-cartesian-coordinates.html">this article</a> to build some intuition for conversion between cartesian and polar coordinates.</p>
<p>In the polar coordinate system, a periodic function with period \(T\) is a vector that rotates around the origin, and completes one full rotation around itself every \(T\) time units.
Look at the graph of \(sin(t)\) in Polar form, for example:</p>
<!-- raw HTML omitted -->
<p>Note how the y-coordinates of the vector&rsquo;s tip traces out a regular sine wave.
You can just as easily plot any periodic function in the polar coordinate system.
To add two periodic functions together, take one rotating vector and center it on the tip of the another rotating vector.
The end result is shown below.
The following animation shows 3 rotating vectors added together, each representing a periodic function:</p>
<!-- raw HTML omitted -->
<p>To convert a sketch to an epicycle animation then, all we need is to convert a term in the Fourier series from cartesian to polar coordinates.
Once we have that, we can add up the terms like in the animation above, and figure out the x and y-coordinates using two sets of epicycles, each representing the Fourier approximation for \(x(t)\) or \(y(t)\).</p>
<p>To do this conversion, we can use the <a href="https://en.wikipedia.org/wiki/Fourier_series#Amplitude-phase_form">polar form of the Fourier series</a>.
Precisely, these are the steps you need to follow:</p>
<ol>
<li>Represent the sketch as a list of points drawn over a period of time.</li>
<li>Convert the list of points into a two separate lists, one containing the x-coordinates of the sketch, and other the y.</li>
<li>Convert each list into a function (I use <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L58">this simple helper</a>).
Now, you have the \(x(t)\) and \(y(t)\).</li>
<li>For each function, find its Fourier series coefficients. <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/fourier.ts#L16">Here</a> is how I do it.</li>
<li>For each function, <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L93">convert the Fourier series coefficients into a set of polar functions</a>.</li>
<li>Using a time step of <code>dt</code>, find the final x and y positions of our approximation, and <a href="https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/components/RedrawCanvas.tsx#L21">draw them on a canvas</a>.</li>
</ol>
<p>If you do everything correctly, you should get something like this:</p>
<!-- raw HTML omitted -->
<p>There is a more novel approach to retracing sketches that involves using only one set of epicycles.
It uses <a href="https://en.wikipedia.org/wiki/Fourier_series#Complex-valued_functions">the complex Fourier Series</a>, and is also fewer lines of code.
When you&rsquo;re new to this concept however, it may throw you off balance, especially if you&rsquo;re not familiar with imaginary numbers and the Argand plane.</p>
<h2 id="proof">Proof</h2>
<p>When I set out to find an &ldquo;intuitive&rdquo; proof for the Fourier series,
all I saw were proofs that begin by stating the equation,
and then proving it by finding the coefficients \(a_n\) and \(b_n\) using integrals.
But where did the equation come from?</p>
<p>Did God whisper it to Joseph Fourier in his dreams?</p>
<p>Did he just happen to run into it by chance?</p>
<p>Surprisingly, the answer is &ldquo;yes&rdquo;.
Of course, he had an unparalleled instinct for math that he whetted with years of practice and research.
There has to be a certain train of thought that he boarded to arrive at this revelation, that any periodic signal can be represented as a sum of simpler harmonics.
But that line of thinking was never publicized, and as you&rsquo;ll see in the next section, there have been people who&rsquo;ve thought of this even before Fourier himself did!</p>
<p>The important part is that Fourier asked a question that was mocked as stupid and bizarre until he presented a proof.
And that proof does in fact begin by stating the following hypothesis:</p>
<p>$$
f_o(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)}
$$</p>
<p>Here, \(f_o\) is an odd function with a fundamental period of \(w_0\).
If we can derive a value for \(b_n\) from this equation, we can be convinced that <strong>any odd function can be represented as a sum of sinusoids</strong>.</p>
<p>Now, consider an even function \(f_e\) with a period of \(w_0\):</p>
<p>$$
f_e(t) = \sum_{n=0}^{\infty}a_n cos(n w_0 t)
$$</p>
<p>If we can derive a value for \(a_n\) from this equation, we can be convinced that <strong>any even function can be represented as a sum of co-sinusoids</strong>.</p>
<p>When you combine these two equations with the idea that <a href="https://en.wikipedia.org/wiki/Even_and_odd_functions#Even%E2%80%93odd_decomposition">any periodic function can be represented as a sum of odd and an even function</a>, you get:</p>
<p>$$
f_o(t) + f_e(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)} + \sum_{n=0}^{\infty}a_n cos(n w_0 t)
$$</p>
<p>We can turn the order of this proof, and first say that given any function \(f(t)\), we can find its odd and even parts using the odd-even decomposition rule.
Then, we can represent the odd part as a sum of sinusoids, and the even part as a sum of co-sinusoids.</p>
<p>Now, all that&rsquo;s left is to derive the values for \(a_n\) and \(b_n\) using the two equations stated above.
This is where I save myself the trouble of writing more LaTeX, and defer you to <a href="http://lpsa.swarthmore.edu/Fourier/Series/DerFS.html">this excellent proof</a> by professors from Swarthmore college.
I know I said I&rsquo;d walk you through the proof, but I can&rsquo;t do a better job of it than the electronics professors at Swarthmore did already.
I&rsquo;d hate to repeat their work and not give credit.
If you follow the page I linked, you&rsquo;ll realize that the proof only uses basic calculus and trigonometric identities taught in high school.</p>
<h2 id="origins">Origins</h2>
<p>You&rsquo;ll be surprised to learn that the idea behind the series predates Fourier himself.</p>
<p>2 centuries before Fourier, <a href="https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss">Carl Friedrich Gauss</a> created several algorithms to aid his study of astronomy.
He was one of the many applied mathematicians who wanted to predict the position of Ceres in the night sky.
One of the algorithms he discovered in this quest, was the <a href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier Transform</a> - a function that is very closely related with the Fourier Series.
However, he never published his work because he believed his method to be an unimportant detail in his achievement of estimating Ceres' position.</p>
<p>In the 1700s, Euler had found applications for decomposing periodic functions with Fourier Series.</p>
<p>Half a century before Fourier, <a href="https://en.wikipedia.org/wiki/Daniel_Bernoulli">Bernoulli</a> was studying the motion of a string.
He proposed the idea that periodic functions can be represented as sums of harmonics.
Nobody at the time believed this to be a general method, and his ideas were left unexplored.</p>
<p>Things changed in 1807, when a French math wizard named Joseph Fourier found himself studying the heat equation in a metal plate.
In his search for a solution, he sought to ask a seemingly absurd question:</p>
<p><em>Can we represent any periodic function as a sum of simple sine and cosine functions?</em></p>
<p>Precisely, he sought to represent any periodic function \(f(x)\) with a frequency of \(\omega_0\) , in the following form:</p>
<!-- raw HTML omitted -->
<p>Revered mathematicians of the time, including Langrange and Laplace, rejected this idea as informal and hand-wavy.
The panel evaluating his findings said:</p>
<p><em>&ldquo;The manner in which the author arrives at these equations is not exempt of difficulties and&hellip;his analysis to integrate them still leaves something to be desired on the score of generality and even rigour.&quot;</em>
Perhaps this was because of a lack of reasoning as to <em>why</em> one should even begin to think of periodic functions this way.</p>
<p>It&rsquo;s not unheard of mathematical ideas to sprout into existence out of seemingly ridiculous places.
Ramanujan attributed some of his major findings to God, and dipped at the age of 32.</p>
<p>After the Fourier Series was accepted by the scientific populace, it spawned a new field of research, called Fourier analysis.
Developments in this field found everyday use in almost every science.</p>
<h2 id="applications">Applications</h2>
<p>By this point, you know enough about Fourier analysis to delve deeper into it yourself.
It would be a shame to blunt the edge of theory by not applying it in practice.</p>
<p>Here a few things you could do:</p>
<ul>
<li>Implement noise reduction in sounds.</li>
<li>Sharpen images with denoising.</li>
<li>Write a <a href="https://en.wikipedia.org/wiki/JPEG">JPEG</a> encoder/decoder.</li>
<li><a href="https://www.johndcook.com/blog/2011/06/21/how-to-fit-an-elephant/">Fit an elephant</a></li>
<li>Write basic shape recognizers.</li>
</ul>
<h2 id="resources-and-further-reading">Resources and further reading</h2>
<ul>
<li>3b1b - <a href="https://www.youtube.com/watch?v=r6sGWTCMz2k">But what is a Fourier series?</a>.</li>
<li>Swarthmore college - <a href="http://lpsa.swarthmore.edu/Fourier/Series/WhyFS.html">The fourier series</a>.</li>
<li>Jez Swanson - <a href="https://www.jezzamon.com/fourier/index.html">An interactive introduction to the fourier transform</a>.</li>
<li>Tony Rosler - <a href="https://www.myfourierepicycles.com/">myFourierEpicycles</a></li>
</ul>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content:encoded>
    </item>
    
    <item>
      <title>Project: Zuzu</title>
      <link>https://cbrtl.github.io/posts/zuzu/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/zuzu/</guid>
      <description>Zuzu is a static site generator that converts all your markdown files into static htmls pages. It uses Github falvoured Markdown CSS and highlight js to beautify code snippets.</description>
      <content:encoded><![CDATA[<h1 id="zuzu">Zuzu</h1>
<blockquote>
<p>Static Site Generator</p>
</blockquote>
<h3 id="zuzu-is-a-minimal-static-site-generator">Zuzu is a minimal static site generator.</h3>
<p>Zuzu converts all your markdown files into static htmls pages to be rendered quickly. It uses Github falvoured Markdown CSS and highlight js to beautify code snippets. <a href="https://anubhavp.me/blog">This blog</a>, for example, has been written using this generator. This enables noobs like me to write blogs without having to learn a lot of code! All you need to do is to write a markdown file and it will be rendered as a page ;)</p>
<h2 id="how-does-it-work-">How does it work ?</h2>
<p>Zuzu parses the markdown file using <em>javascript</em> and renders it as <em>html documents</em>. It then saves the html files in the <code>public</code> folder. The public folder, with <code>index.html</code> file, is the final output of the generator and this can be deployed and hosted in various platforms. This particular blog has been deployed on <a href="https://anubhavp.me/blog/">Github Pages</a>.</p>
<h3 id="1-create-a-markdown-file">1. Create a markdown file</h3>
<pre><code># This is a title
This is a paragraph
This is another paragraph
This is a list:
* Item 1
* Item 2
* Item 3
This is a code block:
```
print(&quot;Hello World&quot;)
```
This is a table:
| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| 1        | 2        | 3        |
| 4        | 5        | 6        |
| 7        | 8        | 9        |
This is a link: [zuzu](https://anubhavp.me/blog/zuzu.html)
</code></pre>
<h3 id="2-run-the-generator-and-find-your-blog">2. Run the generator and find your blog</h3>
<p>Run <code>npm run generate</code> in the console. Zuzu is also available as a CLI tool. You can install it using <code>npm install -g zuzu</code>. Then run <code>npx zuzussg</code> in the console. This will generate the html files in the <code>public</code> folder. You can then deploy the <code>public</code> folder to any hosting platform.
You&rsquo;ll now see the blog in the public folder! Run the index.html file in your browser to see your blog. You may now deploy your site
to a server. Zuzu also supports CI/CD. You can use Github Actions to automatically deploy your site to Github Pages.</p>
<h3 id="you-can-find-the-working-in-the-repo-herehttpsgithubcomcodebotxzuzu">You can find the working in the repo <a href="https://github.com/codebotx/zuzu/">here</a></h3>
<h4 id="to-do">To-do</h4>
<ul>
<li>Add another template file in the initial folder with index.html and respective assets.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Project: Vyse</title>
      <link>https://cbrtl.github.io/posts/vyse/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/vyse/</guid>
      <description>A dynamically typed, interpreted and fast scriptling language inspired by Lua for rapid prototyping of applications like video games.</description>
      <content:encoded><![CDATA[<p>Sometime during my 2nd year in college, I&rsquo;d made a hobby programming language that turned out quite well.
It&rsquo;s named &ldquo;Vyse&rdquo;, after <a href="https://dota2.fandom.com/wiki/Scythe_of_Vyse">Guinsoo&rsquo;s Scythe of Vyse</a> from DotA.</p>
<p>Vyse is a dynamically typed, interpreted and fast scriptling language inspired by Lua for rapid prototyping of applications like video games.
Programmers familiar with Lua/Javascript can pick up the language within an hour.
Vyse also comes with a C++ API for frictionless embedding in projects.</p>
<p>Features include:</p>
<ul>
<li>Modules, both native and user-level</li>
<li>An embedding API</li>
<li>Closures, higher order functions to facilitate FP.</li>
<li>Prototypical inheritance, inspired from JS and Lua.</li>
</ul>
<p>Since the language already has detailed (but remarkably outdated) documentation on <a href="https://injuly.in/vyse">its website</a>,
I won&rsquo;t bother rewriting any of that here.</p>
<p>Instead, here is the simple number-guessing program:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rs" data-lang="rs"><span style="font-weight:bold">const</span> math = import(<span style="font-style:italic">&#34;math&#34;</span>)

<span style="font-weight:bold">fn</span> play() {
  <span style="font-weight:bold">const</span> num = math.randint(0, 100)
  <span style="font-weight:bold">let</span> guess = input(<span style="font-style:italic">&#34;guess: &#34;</span>):<span style="font-weight:bold">to_num</span>()
  <span style="font-weight:bold">let</span> n_attempts = 1
  <span style="font-weight:bold">while</span> guess != num {
    <span style="font-weight:bold">if</span> guess &lt; num {
      print(<span style="font-style:italic">&#34;Too low! Try higher.&#34;</span>)
    } <span style="font-weight:bold">else</span> {
      print(<span style="font-style:italic">&#34;Too high! Try lower.&#34;</span>)
    }

    n_attempts += 1
    guess = input(<span style="font-style:italic">&#34;guess: &#34;</span>):<span style="font-weight:bold">to_num</span>()
  }

  print(<span style="font-style:italic">&#34;Well done! number of attempts: &#34;</span>, n_attempts)
}

play()
</code></pre></div><p>Of course, it&rsquo;s possible to do more than just write simple terminal programs.
For instance, I&rsquo;m currently working on a <a href="https://github.com/cpp-gamedev/wex">2D game engine</a>
that will allow users to write games with the language.
This project hasn&rsquo;t seen any major progress in the past year owing to my busy (read: poorly managed) schedule,
however, I&rsquo;m looking to resume this project in the coming quarter.</p>
<p>Currently, there are no official releases for Vyse.
This is majorly due to me not being in possession of a windows (yuck) device ATM.
There are some bugs that I&rsquo;ve yet to prune out before I can make a stable v0.1 release for all platforms.</p>
<p>The one benefit of having no users, is a leisurely development pace.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://cbrtl.github.io/posts/faq/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/faq/</guid>
      <description>Before you ask...</description>
      <content:encoded><![CDATA[<h2 id="why-is-it-called-cbrtl">Why is it called &lsquo;cbrtl&rsquo;?</h2>
<p><del>Because every other GitHub org name was taken</del>.</p>
<p>It comes from the C stdlib function <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/cbrt-cbrtf-cbrtl?view=msvc-160">cbrtl</a>.</p>
<p>There is a some trivia to the oddly text-to-speechified name.</p>
<p>In older versions of ANSI C, only the first 6 characters of an identifier were considered when compiling source code.
So most standard library functions in C have odd names like <code>strstr</code>, <code>strtod</code>, <code>alloca</code> and so on&hellip;</p>
<h2 id="why-at-all">Why at all?</h2>
<p>Some of my acquaintances from other colleges have clubs, groups and spaces dedicated to open source and software
development. Couple of days ago, I came across IIT Roorkee&rsquo;s <a href="https://sdslabs.co/">SDSLabs </a> and PES Uni&rsquo;s <a href="https://pesos.github.io/">PES Open Source</a>.  After looking into it
a bit more, turns out most colleges these days have their own groups for related stuff.</p>
<p>We thought it would be fun to have a similar group of like minded developers from our college.</p>
<p>Is it too ambitious? We won&rsquo;t know until we don&rsquo;t try.</p>
<h2 id="what-is-it-that-cbrtl-aims-to-do-exactly">What is it that cbrtl aims to do exactly?</h2>
<p>Good question.
We don&rsquo;t have a concrete answer.
That said, I&rsquo;ll throw in most of what we&rsquo;ve gathered from our goal so far, and you decide if you like the sound of it.</p>
<ul>
<li>Contributing to Open Source.</li>
<li>Talks and meetups.</li>
<li>Showcasing projects from individuals and teams.</li>
<li>Code reviews and educational blogs (hopefully ones that haven&rsquo;t been done to death before&hellip;).</li>
</ul>
<h2 id="what-platforms-are-you-present-on">What platforms are you present on?</h2>
<p>For now, our presence is limited to <a href="">Discord</a> and the <a href="https://github.com/cbrtl">GitHub organization</a>.
Mostly because these are very solid platforms and we are tight on the number of people moderating.</p>
<h2 id="what-skills-do-i-need">What skills do I need?</h2>
<p>Not much.</p>
<ul>
<li>The ability to code.</li>
<li>The willingness to learn.</li>
<li>Basic knowledge of Git and GitHub.</li>
</ul>
<p>Even 1 and 3 are optional.</p>
<h2 id="where-do-i-join">Where do I join?</h2>
<p>As mentioned earlier,  you can join the <a href="">Discord</a> and the <a href="https://github.com/cbrtl">GitHub organization</a>.
More info on <a href="/">Getting started with cbrtl and Open Source</a>.</p>
<h2 id="is-there-anything-i-can-do-to-help">Is there anything I can do to help?</h2>
<p>You can volunteer to help us keep the community thriving.
We are looking for volunteers who can help with:</p>
<ul>
<li><strong>Front end development</strong>: To touch up the current blog site.</li>
<li><strong>Moderation</strong>: To manage the discord server and the GitHub org.</li>
<li><strong>Code reviews</strong>: To mandate some code quality for those who demand it.</li>
<li><strong>Technical Writers</strong>: To aid in writing blog posts.</li>
<li><strong>Editors</strong>: A second pair of eyes helps catch common mistakes in writing :)</li>
</ul>
<h2 id="is-this-an-official-college-club">Is this an official college club?</h2>
<p>No.
This is an entirely independent student initiative that is looking for active participation.
A decentralized group of like-minded programmers.</p>
<h2 id="will-there-be-events-with-cash-prizes">Will there be events with cash prizes?</h2>
<p>No.
And we want to be upfront about it.
We want to keep this community closed to people who code because they like creating.
Of course, that is not to say we discredit any other motivation you may have.</p>
<p>As such, we won&rsquo;t conduct any competitions with cash prizes for the foreseeable future.
Other clubs (which are official) in our college do a great (<del>citation needed*</del>) job at that regardless.</p>
<h2 id="what-kinds-of-events-can-i-expect">What kinds of events can I expect?</h2>
<p>Other than project showcases and on-demand code review sessions, we are open to other ideas.</p>
<p>Not as much of an &lsquo;event&rsquo; but you can expect group projects that will (hopefully) be active throughout.</p>
<h2 id="i-have-some-other-questions-where-can-i-ask">I have some other questions, where can I ask?</h2>
<p>You&rsquo;re more than welcome on the mailing list, or in the discord server.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Showcasing your project on cbrtl</title>
      <link>https://cbrtl.github.io/posts/project-showcase/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/project-showcase/</guid>
      <description>Some things to keep in mind while adding your project</description>
      <content:encoded><![CDATA[<p>This page intends to establish some minor ordinances surrounding project ideas and showcases.
cbrtl was created with the intent of promoting the spirit of Open Source.
Often times, some of the most interesting Open Source projects live in lesser known corners of GitHub,
collecting dust on a lonesome profile with 3-5 followers and an occasionally active commit graph.</p>
<p>Cbrtl is an attempt at stringing together these unrelated projects into a web of resources and dev-logs
that might be of use to on-lookers.</p>
<p>To avoid noisy applications and tutorial cut-pastes, we enforce a standard and a few (lax) rules.</p>
<h1 id="what-constitutes-showcase-worthy-software">What constitutes showcase-worthy software?</h1>
<p>Anything that <strong>serves a clear purpose</strong>.
A project can be showcased if it satisfies the following criteria:</p>
<ul>
<li>Has a proper github <code>README.md</code></li>
<li>Is <strong>not</strong> a tutorial follow-through.
So anything along these lines is generally discouraged:
<ul>
<li>&ldquo;todo app in react&rdquo;</li>
<li>&ldquo;planner app in vue&rdquo;</li>
<li>&ldquo;terminal tic-tac-toe with C&rdquo;</li>
<li>and so on&hellip;</li>
</ul>
</li>
<li>Is being actively worked on by it&rsquo;s developer(s).
It is <strong>OK</strong> even if it&rsquo;s in infancy when the project is first showcased.</li>
<li>Is open to contribution from people.</li>
<li>Is not a lazy fork (Forks that are some-what different from the parent repos are absolutely okay).</li>
</ul>
<h2 id="examples">Examples</h2>
<p>Here&rsquo;s a few examples to show what we mean by &ldquo;showcase-able projects&rdquo;.
Note that not all of them are from the members of cbrtl, since we&rsquo;re just starting out.</p>
<ul>
<li><a href="https://github.com/karnkaul/LittleEngineVk">levk</a>: A 3D Game engine written in C++ and
Vulkan. <strong>Author: <a href="https://github.com/karnkaul">karnage</a></strong></li>
<li><a href="https://aitikgupta.github.io/sociomark/">SocioMark</a>: A social media platform with
plagiarism and attack-proof authenticity checks for user uploaded content.
<strong>Author: <a href="https://github.com/aitikgupta">Aitik Gupta</a></strong></li>
<li><a href="https://github.com/srijan-paul/snap">Vyse</a>: A fast, dynamically typed and interpreted programming
language. <strong>Author: <a href="https://github.com/srijan-paul">srijan_</a></strong> (<em>cough</em> self-plug)</li>
<li><a href="https://github.com/karnkaul/locc">locc</a>: A C++ utility to count lines of code in a project.
<strong>Author: <a href="https://github.com/karnkaul">karnage</a></strong></li>
<li><a href="https://github.com/rxi/lume">Lume</a>: A Lua library for gamedev. <strong>Author: <a href="https://github.com/rxi">rxi</a></strong></li>
</ul>
<h1 id="getting-your-project-showcased">Getting your project showcased.</h1>
<p>You have made something, or at least the skeleton of something that will go on to become a full fledged project.
How do you put your code and product on cbrtl?</p>
<ol>
<li>Reach out to us either on the mailing list, or on the discord server.</li>
<li>Have the following ready:
<ul>
<li>A GitHub repo with a well set-up <code>README</code></li>
<li>A (short) write-up describing the scope, aim, tech-stack and architecture
of your project.</li>
</ul>
</li>
<li>Shoot any moderator with the aforementioned and we&rsquo;ll give you:
<ul>
<li>A GitHub repo symlink (<em>symlink?</em>) on the <a href="https://github.com/cbrtl">cbrtl org page</a>.</li>
<li>A community showcase.</li>
<li>A blog post referencing the content from your write-up, describing the project.</li>
<li>Encourage other members to collaborate and contribute.</li>
</ul>
</li>
</ol>
<p>A good place to start getting involved can be our <a href="https://discord.gg/3qry3u569v">Discord server</a>.</p>
<h1 id="have-an-idea-want-a-team">Have an idea? Want a team?</h1>
<p>It is not so uncommon for programmers to get an idea but not have enough time commitment (or knowledge) to drive the idea to fruition.
If that&rsquo;s how things end up for you, then we might be able to help with pointing you in the right direction.</p>
<p>We may be able to help turn your solo idea into a collaborative work environment.
You can choose to have the repo be on the org, or on your GitHub profile.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Getting started with cbrtl and FOSS</title>
      <link>https://cbrtl.github.io/posts/getting-started/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/getting-started/</guid>
      <description>Grinding gears</description>
      <content:encoded><![CDATA[<p>So you read up on open source, read up on <a href="https://cbrtl.github.io/posts/what-and-why/">cbrtl</a> and want to start hacking.
There are some preliminaries that you should take care of first.
These are listed in order:</p>
<ol>
<li>Create a GitHub account.</li>
<li>Set up git on your local computer.
<ul>
<li>If you&rsquo;re on windows, download <a href="https://git-scm.com/downloads">GitBash</a> and follow the install instructions.</li>
<li>Get a personal test repo set up and try out commands like <code>push</code>, <code>commit</code>, <code>pull</code> etc.</li>
</ul>
</li>
<li>Join the <a href="https://github.com/cbrtl">GitHub organization</a> by adding yourself to the members list (More on that below).</li>
<li>Join the <a href="">Discord server</a>.</li>
</ol>
<p>Alright, you&rsquo;re set to start out.
At this point, I would recommend getting familiar with GitHub, reading up some articles and blogs.
I highly recommend <a href="https://www.atlassian.com/git/tutorials">Atlassian&rsquo;s git tutorials</a> and documentation.</p>
<h1 id="making-your-first-pull-request">Making your first Pull Request</h1>
<p>(<strong>NOTE:</strong> If you have experience using git and don&rsquo;t want to waste time, just ping the <code>@cbrtl moderator</code> role on discord and we&rsquo;ll add you).</p>
<p>If you had to follow through the above, then it&rsquo;s likely that you&rsquo;ve never made a PR before.
To get your feet wet, make your first PR on our <a href="https://github.com/cbrtl/members-list">member&rsquo;s list repo</a>.
Once you do that, you&rsquo;ll be recognized as a member of cbrtl on GitHub.
You will find a step by step guide on how to do that on the repository&rsquo;s <code>README</code>.</p>
<p>Done? Great! 🎉</p>
<p>Now you&rsquo;re going to have to wait for a moderator to merge your PR.
That should be done by the time you&rsquo;re done reading this article ;)</p>
<h1 id="getting-the-most-out-of-it">Getting the most out of it</h1>
<p>The way you grow and shape your journey into Open Source is dictated by your level of engagement with people, and participation
in projects, discussions and the like.
Now then, how do you define &ldquo;engagement&rdquo; and &ldquo;participation&rdquo;?
It can mean different things for different people, but the recurring ideas are the same.</p>
<h2 id="ways-to-participate">Ways to participate</h2>
<ul>
<li>Contributing to the <a href="https://github.com/cbrtl/cbrtl-site">blog</a>.</li>
<li>Part-taking in open source projects being built in the community.</li>
<li>Coming up with your own project ideas, and getting people to contribute.</li>
<li>Showcasing projects you have made on cbrtl blog and GitHub organization.</li>
<li>Contributing to larger open source projects outside cbrtl.</li>
<li>Asking questions, getting to know people better.</li>
<li>Volunteering on development and content moderation. <a href="http://cbrtl.github.io/posts/what-and-why/#volunteering-to-cbrtl">Details here</a></li>
</ul>
<h2 id="starting-your-own-project">Starting your own project.</h2>
<p>It would be great to have more interesting projects available for people to work on.
Look at the <a href="http://cbrtl.github.io/posts/project-showcase/">project showcase post</a> for relevant information.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
